name: 发布预览版

on:
  push:
    branches:
      - main
      - '!release-please*'
  pull_request_target:
    types: 
    - opened
    - reopened
    - synchronize
  workflow_dispatch:

permissions:
  contents: write
  id-token: write
  pull-requests: write

jobs:
  beta-version:
    if: "!startsWith(github.head_ref, 'release-please')"
    runs-on: ubuntu-latest
    outputs:
      beta_version: ${{ steps.set-version.outputs.BETA_VERSION }}
      short_commit_hash: ${{ steps.get-sha.outputs.SHORT_COMMIT_HASH }}
      build_timestamp: ${{ steps.get-build-timestamp.outputs.BUILD_TIMESTAMP }}
      package_name: ${{ steps.set-version.outputs.PACKAGE_NAME }}
      package_short_name: ${{ steps.set-version.outputs.PACKAGE_SHORT_NAME }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref || github.ref_name }}
          repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}

      - name: 设置 pnpm
        uses: pnpm/action-setup@v4

      - name: 生成 Beta 版本号
        id: set-version
        run: |
          branch=${{ github.event.pull_request.head.ref || github.ref_name }}
          git fetch origin $branch --depth=100
          git checkout $branch
          RELEASE_BRANCH="release-please--branches--main--components--logger"
          if git ls-remote --heads origin $RELEASE_BRANCH | grep -q $RELEASE_BRANCH; then
            git fetch origin $RELEASE_BRANCH --depth=1
            git checkout FETCH_HEAD -- package.json
            VERSION=$(pnpm pkg get version | tr -d '"')
            git checkout $branch -- package.json
          else
            VERSION=$(pnpm pkg get version | tr -d '"')
          fi       
          BETA_VERSION="$VERSION-beta.$(date +%s)"

          PACKAGE_NAME=$(pnpm pkg get name | tr -d '"')
          PACKAGE_SHORT_NAME=$(pnpm pkg get name | tr -d '"' | awk -F'/' '{print $2}')
          echo "PACKAGE_SHORT_NAME=$PACKAGE_SHORT_NAME" >> $GITHUB_ENV
          echo "PACKAGE_SHORT_NAME=$PACKAGE_SHORT_NAME" >> $GITHUB_OUTPUT
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "BETA_VERSION=$BETA_VERSION" >> $GITHUB_ENV
          echo "BETA_VERSION=$BETA_VERSION" >> $GITHUB_OUTPUT
          echo "生成的 Beta 版本号: $BETA_VERSION"
          
      - name: 获取分支的最新提交哈希
        id: get-sha
        run: |
          branch=${{ github.event.pull_request_target.head.ref || github.ref_name }}
          git fetch --depth=1 origin $branch
          SHORT_COMMIT_HASH=$(git rev-parse --short FETCH_HEAD)
          echo "SHORT_COMMIT_HASH=$SHORT_COMMIT_HASH" >> $GITHUB_ENV
          echo "SHORT_COMMIT_HASH=$SHORT_COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "分支 $branch 的最新短哈希为: $SHORT_COMMIT_HASH"

      - name: 获取构建时间
        id: get-build-timestamp
        run: |
          branch=${{ github.event.pull_request.head.ref || github.ref_name }}
          git fetch origin $branch --depth=1
          BUILD_TIMESTAMP_UTC=$(git show -s --format=%cd --date=iso-strict origin/$branch)
          echo "BUILD_TIMESTAMP_UTC=$BUILD_TIMESTAMP_UTC"
          BUILD_TIMESTAMP=$(TZ=Asia/Shanghai date -d "$BUILD_TIMESTAMP_UTC" +"%Y-%m-%d %H:%M:%S")

          echo "BUILD_TIMESTAMP=$BUILD_TIMESTAMP" >> $GITHUB_ENV
          echo "BUILD_TIMESTAMP=$BUILD_TIMESTAMP" >> $GITHUB_OUTPUT
          echo "构建时间: $BUILD_TIMESTAMP"

  build:
    needs: beta-version
    uses: ./.github/workflows/build.yaml

  publish-to-pkg-pr-new:
    needs: [beta-version, build]
    runs-on: ubuntu-latest
    steps:
      - name: 获取token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
      
      - name: 导入构建产物
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.beta-version.outputs.package_short_name }}
          path: ./

      - name: 设置 pnpm
        uses: pnpm/action-setup@v4
        
      - name: 发布预览版
        run: |
          pnpm dlx pkg-pr-new publish --json output.json --comment=off > pkg-output.txt 2>&1
          
          echo "## 成功推送的Package包 :" >> $GITHUB_STEP_SUMMARY
          echo "包名: \`${{ needs.beta-version.outputs.package_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "版本号: \`${{ needs.beta-version.outputs.beta_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "提交: \`${{ needs.beta-version.outputs.short_commit_hash }}\`" >> $GITHUB_STEP_SUMMARY
          echo "发布时间: \`${{ needs.beta-version.outputs.build_timestamp }}\`" >> $GITHUB_STEP_SUMMARY
          echo "发布者: \`${{ github.actor }}\`" >> $GITHUB_STEP_SUMMARY
          echo "使用 pnpm:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "pnpm install https://pkg.pr.new/${{ github.repository }}/${{ needs.beta-version.outputs.package_name }}@${{ needs.beta-version.outputs.short_commit_hash }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          echo "## 完整输出信息" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat pkg-output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY


      - name: 发布 PR 评论
        if: github.event_name == 'pull_request_target'
        uses: thollander/actions-comment-pull-request@v3
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          pr-number: ${{ github.event.pull_request_target.number }}
          message: |
            🎉 🎉 🎉 **构建完成！**
            该版本是基于 `${{ github.event.pull_request.head.ref || github.ref_name }}` 分支的快照 [**`${{ needs.beta-version.outputs.short_commit_hash }}`**](https://github.com/${{ github.repository }}/commit/${{ needs.beta-version.outputs.short_commit_hash }}) 所构建的。

            你可以通过以下命令安装该版本：
            ```
            pnpm install https://pkg.pr.new/${{ github.repository }}/${{ needs.beta-version.outputs.package_name }}@${{ needs.beta-version.outputs.short_commit_hash }}
            ```

      - name: 上传NPM包信息
        uses: actions/upload-artifact@v4
        with:
          name: npm-package-info
          path: |
            pkg-output.txt
            output.json
